"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mocha_1 = require("mocha");
var fs = require("fs-extra");
var spawnSync = require('child_process').spawnSync;
var constants_1 = require("../constants");
var functions_1 = require("../functions");
var utils_1 = require("../../src/utils");
mocha_1.describe('Test clasp login function', function () {
    before(functions_1.setup);
    beforeEach(functions_1.backupSettings);
    afterEach(functions_1.restoreSettings);
    mocha_1.it('should exit(0) with LOG.DEFAULT_CREDENTIALS for default login (no global or local rc)', function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.rcGlobal))
            fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        if (fs.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
        var result = spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.LOGIN(false));
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should ERROR.LOGGED_IN if global rc and no --creds option but continue to login', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        var result = spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.LOGGED_IN_GLOBAL);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should exit(0) with ERROR.LOGGED_IN if local rc and --creds option', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.rcLocal, constants_1.FAKE_CLASPRC.local);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.LOGGED_IN_LOCAL);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(1) with ERROR.CREDENTIALS_DNE if --creds file does not exist', function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.clientCredsLocal))
            fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.CREDENTIALS_DNE(constants_1.CLASP_PATHS.clientCredsLocal));
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(1) with ERROR.BAD_CREDENTIALS_FILE if --creds file invalid', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.invalid);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(0) with ERROR.BAD_CREDENTIALS_FILE if --creds file corrupt json', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, functions_1.rndStr());
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it('should exit(1) with LOG.CREDS_FROM_PROJECT if global rc and --creds file valid', function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
        fs.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        fs.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.fake);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stdout).to.contain(utils_1.LOG.LOGIN(true));
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQUM5QiwrQkFBcUM7QUFDckMsNkJBQStCO0FBQ3ZCLElBQUEsOENBQVMsQ0FBOEI7QUFFL0MsMENBS3NCO0FBRXRCLDBDQU1zQjtBQUV0Qix5Q0FHeUI7QUFFekIsZ0JBQVEsQ0FBQywyQkFBMkIsRUFBRTtJQUNwQyxNQUFNLENBQUMsaUJBQUssQ0FBQyxDQUFDO0lBQ2QsVUFBVSxDQUFDLDBCQUFjLENBQUMsQ0FBQztJQUMzQixTQUFTLENBQUMsMkJBQWUsQ0FBQyxDQUFDO0lBQzNCLFVBQUUsQ0FBQyx1RkFBdUYsRUFBRTtRQUMxRixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxRQUFRLENBQUM7WUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0UsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUFXLENBQUMsT0FBTyxDQUFDO1lBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FDdEIsaUJBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUN6RCxDQUFDO1FBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFFLENBQUMsaUZBQWlGLEVBQUU7UUFDcEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyx1QkFBVyxDQUFDLFFBQVEsRUFBRSx3QkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNELElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FDdEIsaUJBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUN6RCxDQUFDO1FBQ0YsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFFLENBQUMsb0VBQW9FLEVBQUU7UUFDdkUsRUFBRSxDQUFDLGFBQWEsQ0FBQyx1QkFBVyxDQUFDLE9BQU8sRUFBRSx3QkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFELElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FDdEIsaUJBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBRyx1QkFBVyxDQUFDLGdCQUFrQixFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQ3ZHLENBQUM7UUFDRixFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN4RCxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFFLENBQUMsSUFBSSxDQUFDLDBFQUEwRSxFQUFFO1FBQ2xGLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLGdCQUFnQixDQUFDO1lBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDN0YsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFHLHVCQUFXLENBQUMsZ0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FDdkcsQ0FBQztRQUNGLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFLLENBQUMsZUFBZSxDQUFDLHVCQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNILFVBQUUsQ0FBQyxJQUFJLENBQUMsd0VBQXdFLEVBQUU7UUFDaEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyx1QkFBVyxDQUFDLGdCQUFnQixFQUFFLHdCQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckUsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFHLHVCQUFXLENBQUMsZ0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FDdkcsQ0FBQztRQUNGLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVDLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM3RCxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFFLENBQUMsSUFBSSxDQUFDLDZFQUE2RSxFQUFFO1FBQ3JGLEVBQUUsQ0FBQyxhQUFhLENBQUMsdUJBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxrQkFBTSxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFNLE1BQU0sR0FBRyxTQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUcsdUJBQVcsQ0FBQyxnQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUN2RyxDQUFDO1FBQ0YsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdELGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNILFVBQUUsQ0FBQyxnRkFBZ0YsRUFBRTtRQUNuRixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsdUJBQVcsQ0FBQyxPQUFPLENBQUM7WUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0UsRUFBRSxDQUFDLGFBQWEsQ0FBQyx1QkFBVyxDQUFDLFFBQVEsRUFBRSx3QkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNELEVBQUUsQ0FBQyxhQUFhLENBQUMsdUJBQVcsQ0FBQyxnQkFBZ0IsRUFBRSx3QkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FDdEIsaUJBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBRyx1QkFBVyxDQUFDLGdCQUFrQixFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQ3ZHLENBQUM7UUFDRixFQUFFLENBQUMsVUFBVSxDQUFDLHVCQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsRCxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsbUJBQU8sQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDIn0=