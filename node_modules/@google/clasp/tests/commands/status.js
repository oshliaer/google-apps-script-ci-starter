"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var fs = require("fs-extra");
var mocha_1 = require("mocha");
var spawnSync = require('child_process').spawnSync;
var tmp = require("tmp");
var path = require("path");
var constants_1 = require("../constants");
var functions_1 = require("../functions");
mocha_1.describe('Test clasp status function', function () {
    before(functions_1.setup);
    function setupTmpDirectory(filepathsAndContents) {
        fs.ensureDirSync('tmp');
        var tmpdir = tmp.dirSync({ unsafeCleanup: true, dir: 'tmp/', keep: false }).name;
        filepathsAndContents.forEach(function (_a) {
            var file = _a.file, data = _a.data;
            fs.outputFileSync(path.join(tmpdir, file), data);
        });
        return tmpdir;
    }
    mocha_1.it('should respect globs and negation rules', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON },
            { file: 'shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        spawnSync(constants_1.CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.claspignore',
            'should/alsoBeIgnored',
            'shouldBeIgnored',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['build/main.js', 'appsscript.json']);
    });
    mocha_1.it('should ignore dotfiles if the parent folder is ignored', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/node_modules/**\n**/**\n!appsscript.json' },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON },
            { file: 'node_modules/fsevents/build/Release/.deps/Release/.node.d', data: constants_1.TEST_CODE_JS },
        ]);
        spawnSync(constants_1.CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.claspignore',
            'node_modules/fsevents/build/Release/.deps/Release/.node.d',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['appsscript.json']);
    });
    mocha_1.it('should respect globs and negation rules when rootDir given', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234", "rootDir":"dist" }' },
            { file: '.claspignore', data: '**/**\n!dist/build/main.js\n!dist/appsscript.json' },
            { file: 'dist/build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'dist/appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON },
            { file: 'dist/shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'dist/should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        spawnSync(constants_1.CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '**/**',
            '!dist/build/main.js',
            '!dist/appsscript.json'
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['dist/build/main.js', 'dist/appsscript.json']);
        // TODO test with a rootDir with a relative directory like "../src"
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQThCO0FBQzlCLDZCQUErQjtBQUMvQiwrQkFBcUM7QUFDN0IsSUFBQSw4Q0FBUyxDQUE4QjtBQUMvQyx5QkFBMkI7QUFDM0IsMkJBQTZCO0FBRTdCLDBDQUlzQjtBQUV0QiwwQ0FHc0I7QUFFdEIsZ0JBQVEsQ0FBQyw0QkFBNEIsRUFBRTtJQUNyQyxNQUFNLENBQUMsaUJBQUssQ0FBQyxDQUFDO0lBQ2QsU0FBUyxpQkFBaUIsQ0FBQyxvQkFBMkQ7UUFDcEYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNuRixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFjO2dCQUFaLGNBQUksRUFBRSxjQUFJO1lBQ3hDLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ0QsVUFBRSxDQUFDLHlDQUF5QyxFQUFFO1FBQzVDLElBQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDO1lBQy9CLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUseUNBQXlDLEVBQUU7WUFDekUsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSx3QkFBWSxFQUFFO1lBQzdDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxnQ0FBb0IsRUFBRTtZQUN2RCxFQUFFLElBQUks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