"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mocha_1 = require("mocha");
var fs = require("fs-extra");
var spawnSync = require('child_process').spawnSync;
var constants_1 = require("../constants");
var functions_1 = require("../functions");
var urls_1 = require("../../src/urls");
var utils_1 = require("../../src/utils");
mocha_1.describe('Test clasp clone <scriptId> function', function () {
    before(functions_1.setup);
    mocha_1.it('should clone a project with scriptId correctly', function () {
        functions_1.cleanup();
        var result = spawnSync(constants_1.CLASP, ['clone', constants_1.SCRIPT_ID], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should clone a project with scriptURL correctly', function () {
        functions_1.cleanup();
        var result = spawnSync(constants_1.CLASP, ['clone', urls_1.URL.SCRIPT(constants_1.SCRIPT_ID)], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error on a non-existing project', function () {
        fs.removeSync('./.clasp.json');
        var result = spawnSync(constants_1.CLASP, ['clone', 'non-existing-project'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_1.ERROR.SCRIPT_ID);
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp clone function', function () {
    before(functions_1.setup);
    mocha_1.it('should prompt for which script to clone correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
    });
    mocha_1.it('should prompt which project to clone and clone it', function () {
        functions_1.cleanup();
        var result = spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8', input: '\n' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error if .clasp.json already exists', function () {
        fs.writeFileSync('.clasp.json', '');
        var result = spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Project file (.clasp.json) already exists.');
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE4QjtBQUM5QiwrQkFBcUM7QUFDckMsNkJBQStCO0FBQ3ZCLElBQUEsOENBQVMsQ0FBOEI7QUFFL0MsMENBR3NCO0FBRXRCLDBDQUdzQjtBQUV0Qix1Q0FBcUM7QUFDckMseUNBQXdDO0FBRXhDLGdCQUFRLENBQUMsc0NBQXNDLEVBQUU7SUFDL0MsTUFBTSxDQUFDLGlCQUFLLENBQUMsQ0FBQztJQUNkLFVBQUUsQ0FBQyxnREFBZ0QsRUFBRTtRQUNuRCxtQkFBTyxFQUFFLENBQUM7UUFDVixJQUFNLE1BQU0sR0FBRyxTQUFTLENBQ3RCLGlCQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUscUJBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUNsRCxDQUFDO1FBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFFLENBQUMsaURBQWlELEVBQUU7UUFDcEQsbUJBQU8sRUFBRSxDQUFDO1FBQ1YsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUN0QixpQkFBSyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUcsQ0FBQyxNQUFNLENBQUMscUJBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQzlELENBQUM7UUFDRixhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVB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