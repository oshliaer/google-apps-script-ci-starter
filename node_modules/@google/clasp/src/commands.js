"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
/**
 * Clasp command method bodies.
 */
var chalk_1 = require("chalk");
var pluralize = require("pluralize");
var apis_1 = require("./apis");
var apiutils_1 = require("./apiutils");
var auth_1 = require("./auth");
var files_1 = require("./files");
var manifest_1 = require("./manifest");
var urls_1 = require("./urls");
var utils_1 = require("./utils");
var open = require('opn');
var inquirer = require('inquirer');
var padEnd = require('string.prototype.padend');
// setup inquirer
var prompt = inquirer.prompt;
inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));
/**
 * Creates a new Apps Script project.
 * @param cmd.type {string} The type of the Apps Script project.
 * @param cmd.title {string} The title of the Apps Script project's file
 * @param cmd.parentId {string} The Drive ID of the G Suite doc this script is bound to.
 * @param cmd.rootDir {string} Specifies the local directory in which clasp will store your project files.
 *                    If not specified, clasp will default to the current directory.
 */
exports.create = function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    var _a, title, type, parentId, answers, DRIVE_FILE_MIMETYPES, driveFileType, driveFile, scriptId, err_1, res, createdScriptId, rootDir, files;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: 
            // Handle common errors.
            return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                // Handle common errors.
                _b.sent();
                if (files_1.hasProject())
                    return [2 /*return*/, utils_1.logError(null, utils_1.ERROR.FOLDER_EXISTS)];
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _b.sent();
                title = cmd.title || utils_1.getDefaultProjectName();
                type = cmd.type;
                parentId = cmd.parentId;
                if (!!type) return [3 /*break*/, 4];
                return [4 /*yield*/, prompt([
                        {
                            type: 'list',
                            name: 'type',
                            message: utils_1.LOG.CLONE_SCRIPT_QUESTION,
                            choices: Object.keys(apis_1.SCRIPT_TYPES).map(function (key) { return apis_1.SCRIPT_TYPES[key]; }),
                        },
                    ])];
            case 3:
                answers = _b.sent();
                type = answers.type;
                _b.label = 4;
            case 4:
                DRIVE_FILE_MIMETYPES = (_a = {},
                    _a[apis_1.SCRIPT_TYPES.DOCS] = 'application/vnd.google-apps.document',
                    _a[apis_1.SCRIPT_TYPES.FORMS] = 'application/vnd.google-apps.form',
                    _a[apis_1.SCRIPT_TYPES.SHEETS] = 'application/vnd.google-apps.spreadsheet',
                    _a[apis_1.SCRIPT_TYPES.SLIDES] = 'application/vnd.google-apps.presentation',
                    _a);
                driveFileType = DRIVE_FILE_MIMETYPES[type];
                if (!driveFileType) return [3 /*break*/, 6];
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.CREATE_DRIVE_FILE_START(type)).start();
                return [4 /*yield*/, auth_1.drive.files.create({
                        requestBody: {
                            mimeType: driveFileType,
                            name: title,
                        },
                    })];
            case 5:
                driveFile = _b.sent();
                parentId = driveFile.data.id || '';
                utils_1.spinner.stop(true);
                console.log(utils_1.LOG.CREATE_DRIVE_FILE_FINISH(type, parentId));
                _b.label = 6;
            case 6:
                // CLI Spinner
                utils_1.spinner.setSpinnerTitle(utils_1.LOG.CREATE_PROJECT_START(title)).start();
                _b.label = 7;
            case 7:
                _b.trys.push([7, 9, , 10]);
                return [4 /*yield*/, utils_1.getProjectSettings(true)];
            case 8:
                scriptId = (_b.sent()).scriptId;
                if (scriptId) {
                    utils_1.logError(null, utils_1.ERROR.NO_NESTED_PROJECTS);
                    process.exit(1);
                }
                return [3 /*break*/, 10];
            case 9:
                err_1 = _b.sent();
                return [3 /*break*/, 10];
            case 10: return [4 /*yield*/, auth_1.script.projects.create({
                    requestBody: {
                        title: title,
                        parentId: parentId,
                    },
                })];
            case 11:
                res = _b.sent();
                utils_1.spinner.stop(true);
                if (!(res.status !== 200)) return [3 /*break*/, 12];
                if (parentId) {
                    console.log(res.statusText, utils_1.ERROR.CREATE_WITH_PARENT);
                }
                utils_1.logError(res.statusText, utils_1.ERROR.CREATE);
                return [3 /*break*/, 14];
            case 12:
                createdScriptId = res.data.scriptId || '';
                console.log(utils_1.LOG.CREATE_PROJECT_FINISH(type, createdScriptId));
                rootDir = cmd.rootDir;
                utils_1.saveProject({
                    scriptId: createdScriptId,
                    rootDir: rootDir,
                }, false);
                if (!!manifest_1.manifestExists()) return [3 /*break*/, 14];
                return [4 /*yield*/, files_1.fetchProject(createdScriptId)];
            case 13:
                files = _b.sent();
                files_1.writeProjectFiles(files, rootDir); // fetches appsscript.json, o.w. `push` breaks
                _b.label = 14;
            case 14: return [2 /*return*/];
        }
    });
}); };
/**
 * Logs the user in. Saves the client credentials to an either local or global rc file.
 * @param {object} options The login options.
 * @param {boolean?} options.localhost If true, authorizes without a HTTP server.
 * @param {string?} options.creds The location of credentials file.
 */
exports.login = function (options) { return __awaiter(_this, void 0, void 0, function () {
    var isLocalLogin, loggedInLocal, loggedInGlobal, useLocalhost, oauthScopes, manifest, credsFile, credentials;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                isLocalLogin = !!options.creds;
                loggedInLocal = utils_1.hasOauthClientSettings(true);
                loggedInGlobal = utils_1.hasOauthClientSettings(false);
                if (isLocalLogin && loggedInLocal)
                    console.error(utils_1.ERROR.LOGGED_IN_LOCAL);
                if (!isLocalLogin && loggedInGlobal)
                    console.error(utils_1.ERROR.LOGGED_IN_GLOBAL);
                console.log(utils_1.LOG.LOGIN(isLocalLogin));
                return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _a.sent();
                useLocalhost = !!options.localhost;
                if (!options.creds) return [3 /*break*/, 5];
                oauthScopes = [];
                return [4 /*yield*/, manifest_1.readManifest()];
            case 2:
                manifest = _a.sent();
                oauthScopes = manifest.oauthScopes || [];
                oauthScopes = oauthScopes.concat([
                    'https://www.googleapis.com/auth/script.webapp.deploy',
                ]);
                console.log('');
                console.log("Authorizing with the following scopes:");
                oauthScopes.map(function (scope) {
                    console.log(scope);
                });
                console.log('');
                console.log("NOTE: The full list of scopes you're project may need" +
                    " can be found at script.google.com under:");
                console.log("File > Project Properties > Scopes");
                console.log('');
                credsFile = fs_1.readFileSync(options.creds, 'utf8');
                credentials = JSON.parse(credsFile);
                return [4 /*yield*/, auth_1.authorize({
                        useLocalhost: useLocalhost,
                        creds: credentials,
                        scopes: oauthScopes,
                    })];
            case 3:
                _a.sent();
                return [4 /*yield*/, apiutils_1.enableAppsScriptAPI()];
            case 4:
                _a.sent();
                return [3 /*break*/, 7];
            case 5: 
            // Not using own credentials
            return [4 /*yield*/, auth_1.authorize({
                    useLocalhost: useLocalhost,
                    scopes: [
                        // Use the default scopes needed for clasp.
                        'https://www.googleapis.com/auth/script.deployments',
                        'https://www.googleapis.com/auth/script.projects',
                        'https://www.googleapis.com/auth/script.webapp.deploy',
                        'https://www.googleapis.com/auth/drive.metadata.readonly',
                        'https://www.googleapis.com/auth/drive.file',
                        'https://www.googleapis.com/auth/service.management',
                        'https://www.googleapis.com/auth/logging.read',
                        // Extra scope since service.management doesn't work alone
                        'https://www.googleapis.com/auth/cloud-platform',
                    ],
                })];
            case 6:
                // Not using own credentials
                _a.sent();
                _a.label = 7;
            case 7:
                process.exit(0); // gracefully exit after successful login
                return [2 /*return*/];
        }
    });
}); };
/**
 * Executes an Apps Script function. Requires clasp login --creds.
 * @param functionName {string} The function name within the Apps Script project.
 * @param cmd.nondev {boolean} If we want to run the last deployed version vs the latest code.
 * @see https://developers.google.com/apps-script/api/how-tos/execute
 * @requires `clasp login --creds` to be run beforehand.
 */
exports.run = function (functionName, cmd) { return __awaiter(_this, void 0, void 0, function () {
    function IsValidJSONString(str) {
        try {
            JSON.parse(str);
        }
        catch (error) {
            throw new Error('Error: Input params not Valid JSON string. Please fix and try again');
        }
        return true;
    }
    /**
     * Runs a function.
     * @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run#response-body
     */
    function runFunction(functionName, params) {
        return __awaiter(this, void 0, void 0, function () {
            var localScript, res, data, err_2, readline, scopes_1, rl_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        // Load local credentials.
                        return [4 /*yield*/, auth_1.loadAPICredentials(true)];
                    case 1:
                        // Load local credentials.
                        _a.sent();
                        return [4 /*yield*/, auth_1.getLocalScript()];
                    case 2:
                        localScript = _a.sent();
                        utils_1.spinner.setSpinnerTitle("Running function: " + functionName).start();
                        return [4 /*yield*/, localScript.scripts.run({
                                scriptId: scriptId,
                                requestBody: {
                                    function: functionName,
                                    parameters: params,
                                    devMode: devMode,
                                },
                            })];
                    case 3:
                        res = _a.sent();
                        utils_1.spinner.stop(true);
                        if (!res || !res.data.done) {
                            utils_1.logError(null, utils_1.ERROR.RUN_NODATA);
                            process.exit(0); // exit gracefully in case localhost server spun up for authorize
                        }
                        data = res.data;
                        // @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run#response-body
                        if (data.response) {
                            if (data.response.result) {
                                console.log(data.response.result);
                            }
                            else {
                                console.log(chalk_1.default.red('No response.'));
                            }
                        }
                        else if (data.error && data.error.details) {
                            // @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run#Status
                            console.error("" + chalk_1.default.red('Exception:'), data.error.details[0].errorType, data.error.details[0].errorMessage, data.error.details[0].scriptStackTraceElements || []);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _a.sent();
                        utils_1.spinner.stop(true);
                        if (err_2) {
                            // TODO move these to logError when stable?
                            switch (err_2.code) {
                                case 401:
                                    // The 401 is probably due to this error:
                                    // "Error: Local client credentials unauthenticated. Check scopes/authorization.""
                                    // This is probably due to the OAuth client not having authorized scopes.
                                    console.log("" +
                                        ("Hey! It looks like you aren't authenticated for the scopes required by this script.\nPlease enter the scopes by doing the following:\n1. Open Your Script: " + urls_1.URL.SCRIPT(scriptId) + "\n2. File > Project Properties > Scopes\n3. Copy/Paste the list of scopes here:\n              ~ Example ~\nhttps://mail.google.com/\nhttps://www.googleapis.com/auth/presentations\n----(When you're done, press <Enter> 2x)----"));
                                    readline = require('readline');
                                    scopes_1 = [];
                                    rl_1 = readline.createInterface({
                                        input: process.stdin,
                                        output: process.stdout,
                                        prompt: '',
                                    });
                                    rl_1.prompt();
                                    rl_1.on('line', function (cmd) {
                                        if (cmd === '') {
                                            rl_1.close();
                                        }
                                        else {
                                            scopes_1.push(cmd);
                                        }
                                    });
                                    rl_1.on('close', function () { return __awaiter(_this, void 0, void 0, function () {
                                        var numScopes;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, manifest_1.addScopeToManifest(scopes_1)];
                                                case 1:
                                                    _a.sent();
                                                    numScopes = scopes_1.length;
                                                    console.log("Added " + numScopes + " " +
                                                        (pluralize('scope', numScopes) + " to your appsscript.json' oauthScopes"));
                                                    console.log('Please `clasp login --creds <file>` to log in with these new scopes.');
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                    // We probably don't need to show the unauth error
                                    // since we always prompt the user to fix this now.
                                    // logError(null, ERROR.UNAUTHENTICATED_LOCAL);
                                    break;
                                case 403:
                                    utils_1.logError(null, utils_1.ERROR.PERMISSION_DENIED_LOCAL);
                                    break;
                                case 404:
                                    utils_1.logError(null, utils_1.ERROR.EXECUTE_ENTITY_NOT_FOUND);
                                    break;
                                default:
                                    utils_1.logError(null, "(" + err_2.code + ") Error: " + err_2.message);
                            }
                        }
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    var scriptId, devMode, _a, paramString, params;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
            case 1:
                _b.sent();
                return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 2:
                _b.sent();
                return [4 /*yield*/, utils_1.getProjectSettings(true)];
            case 3:
                scriptId = (_b.sent()).scriptId;
                devMode = !cmd.nondev;
                _a = cmd.params, paramString = _a === void 0 ? '[]' : _a;
                IsValidJSONString(paramString);
                params = JSON.parse(paramString);
                // Ensures the manifest is correct for running a function.
                // The manifest must include:
                // "executionApi": {
                //   "access": "MYSELF"
                // }
                return [4 /*yield*/, manifest_1.isValidManifest()];
            case 4:
                // Ensures the manifest is correct for running a function.
                // The manifest must include:
                // "executionApi": {
                //   "access": "MYSELF"
                // }
                _b.sent();
                // TODO COMMENT THIS. This uses a method that gives a HTML 404.
                // await enableExecutionAPI();
                // Pushes the latest code if in dev mode.
                // We need to update the manifest before executing to:
                // - Ensure the execution API is enabled.
                // - Ensure we can run functions that were developed locally but not pushed.
                if (devMode) {
                    // TODO enable this once we can properly await pushFiles
                    // await pushFiles(true);
                }
                if (!!functionName) return [3 /*break*/, 6];
                return [4 /*yield*/, apiutils_1.getFunctionNames(auth_1.script, scriptId)];
            case 5:
                functionName = _b.sent();
                _b.label = 6;
            case 6: return [4 /*yield*/, runFunction(functionName, params)];
            case 7:
                _b.sent();
                return [2 /*return*/];
        }
    });
}); };
/**
 * Acts as a router to apis subcommands
 * Calls functions for list, enable, or disable
 * Otherwise returns an error of command not supported
 */
exports.apis = function (options) { return __awaiter(_this, void 0, void 0, function () {
    var subcommand, serviceName, apisUrl, _a, _b, command;
    var _this = this;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, auth_1.loadAPICredentials()];
            case 1:
                _c.sent();
                subcommand = process.argv[3];
                serviceName = process.argv[4];
                if (!options.open) return [3 /*break*/, 3];
                _b = (_a = urls_1.URL).APIS;
                return [4 /*yield*/, utils_1.getProjectId()];
            case 2:
                apisUrl = _b.apply(_a, [_c.sent()]);
                console.log(apisUrl);
                return [2 /*return*/, open(apisUrl, { wait: false })];
            case 3:
                command = {
                    enable: function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            apiutils_1.enableOrDisableAPI(serviceName, true);
                            return [2 /*return*/];
                        });
                    }); },
                    disable: function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            apiutils_1.enableOrDisableAPI(serviceName, false);
                            return [2 /*return*/];
                        });
                    }); },
                    list: function () { return __awaiter(_this, void 0, void 0, function () {
                        var projectId, MAX_PAGE_SIZE, list, serviceList, enabledAPIs, _i, enabledAPIs_1, enabledAPI, name, data, services, PUBLIC_ADVANCED_SERVICE_IDS, publicServices, _loop_1, _a, PUBLIC_ADVANCED_SERVICE_IDS_1, publicServiceId, _b, publicServices_1, api;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
                                case 1:
                                    _c.sent();
                                    /**
                                     * List currently enabled APIs.
                                     */
                                    console.log('\n# Currently enabled APIs:');
                                    return [4 /*yield*/, utils_1.getProjectId()];
                                case 2:
                                    projectId = _c.sent();
                                    MAX_PAGE_SIZE = 200;
                                    return [4 /*yield*/, auth_1.serviceUsage.services.list({
                                            parent: "projects/" + projectId,
                                            filter: 'state:ENABLED',
                                            pageSize: MAX_PAGE_SIZE,
                                        })];
                                case 3:
                                    list = _c.sent();
                                    serviceList = list.data.services || [];
                                    if (serviceList.length >= MAX_PAGE_SIZE) {
                                        console.log('Uh oh. It looks like Grant did not add pagination. Please create a bug.');
                                    }
                                    enabledAPIs = serviceList.filter(function (service) {
                                        return service.state === 'ENABLED';
                                    });
                                    for (_i = 0, enabledAPIs_1 = enabledAPIs; _i < enabledAPIs_1.length; _i++) {
                                        enabledAPI = enabledAPIs_1[_i];
                                        if (enabledAPI.config && enabledAPI.config.documentation) {
                                            name = enabledAPI.config.name || 'Unknown name.';
                                            console.log(name.substr(0, name.indexOf('.')) + " - " + enabledAPI.config.documentation.summary);
                                        }
                                    }
                                    /**
                                     * List available APIs.
                                     */
                                    console.log('\n# List of available APIs:');
                                    return [4 /*yield*/, auth_1.discovery.apis.list({
                                            preferred: true,
                                        })];
                                case 4:
                                    data = (_c.sent()).data;
                                    services = data.items || [];
                                    PUBLIC_ADVANCED_SERVICE_IDS = apis_1.PUBLIC_ADVANCED_SERVICES.map(function (advancedService) { return advancedService.serviceId; });
                                    publicServices = [];
                                    _loop_1 = function (publicServiceId) {
                                        var service = services.find(function (s) { return s.name === publicServiceId; });
                                        // for some reason 'youtubePartner' is not in the api list.
                                        if (service && service.id && service.description) {
                                            publicServices.push(service);
                                        }
                                    };
                                    for (_a = 0, PUBLIC_ADVANCED_SERVICE_IDS_1 = PUBLIC_ADVANCED_SERVICE_IDS; _a < PUBLIC_ADVANCED_SERVICE_IDS_1.length; _a++) {
                                        publicServiceId = PUBLIC_ADVANCED_SERVICE_IDS_1[_a];
                                        _loop_1(publicServiceId);
                                    }
                                    // Sort the services based on id
                                    publicServices.sort(function (a, b) {
                                        if (a.id < b.id)
                                            return -1;
                                        if (a.id > b.id)
                                            return 1;
                                        return 0;
                                    });
                                    // Format the list
                                    for (_b = 0, publicServices_1 = publicServices; _b < publicServices_1.length; _b++) {
                                        api = publicServices_1[_b];
                                        console.log(padEnd(api.name, 25) + " - " + padEnd(api.description, 60));
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    }); },
                    undefined: function () {
                        command.list();
                        console.log("# Try these commands:\n- clasp apis list\n- clasp apis enable slides\n- clasp apis disable slides");
                    },
                };
                if (command[subcommand]) {
                    command[subcommand]();
                }
                else {
                    utils_1.logError(null, utils_1.ERROR.COMMAND_DNE('apis ' + subcommand));
                }
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=data:application/json;base64,