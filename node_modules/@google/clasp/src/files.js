"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var mkdirp = require("mkdirp");
var multimatch = require("multimatch");
var recursive = require("recursive-readdir");
var ts = require("typescript");
var auth_1 = require("./auth");
var dotfile_1 = require("./dotfile");
var utils_1 = require("./utils");
var ts2gas = require('ts2gas');
var readMultipleFiles = require('read-multiple-files');
var findParentDir = require('find-parent-dir');
/**
 * Gets the local file type from the API FileType.
 * @param  {string} type The file type returned by Apps Script
 * @return {string}      The file type
 * @see https://developers.google.com/apps-script/api/reference/rest/v1/File#FileType
 */
function getFileType(type, fileExtension) {
    return type === 'SERVER_JS' ? fileExtension || 'js' : type.toLowerCase();
}
exports.getFileType = getFileType;
/**
 * Returns true if the user has a clasp project.
 * @returns {boolean} If .clasp.json exists.
 */
function hasProject() {
    return fs.existsSync(dotfile_1.DOT.PROJECT.PATH);
}
exports.hasProject = hasProject;
/**
 * Returns in tsconfig.json.
 * @returns {ts.TranspileOptions} if tsconfig.json not exists, return undefined.
 */
function getTranspileOptions() {
    var projectDirectory = findParentDir.sync(process.cwd(), dotfile_1.DOT.PROJECT.PATH) || dotfile_1.DOT.PROJECT.DIR;
    var tsconfigPath = path.join(projectDirectory, 'tsconfig.json');
    var userConf = {};
    if (fs.existsSync(tsconfigPath)) {
        var tsconfigContent = fs.readFileSync(tsconfigPath, 'utf8');
        var parsedConfigResult = ts.parseConfigFileTextToJson(tsconfigPath, tsconfigContent);
        return {
            compilerOptions: parsedConfigResult.config.compilerOptions,
        };
    }
    return {};
}
exports.getTranspileOptions = getTranspileOptions;
/**
 * Recursively finds all files that are part of the current project, and those that are ignored
 * by .claspignore and calls the passed callback function with the file lists.
 * @param {string} rootDir The project's root directory
 * @param {FilesCallBack} callback The callback will be called with the following paramters
 *   error: Error if there's an error, otherwise null
 *   result: string[][], List of two lists of strings, ie. [nonIgnoredFilePaths,ignoredFilePaths]
 *   files?: Array<AppsScriptFile|undefined> Array of AppsScriptFile objects used by clasp push
 * @todo Make this function actually return a Promise that can be awaited.
 */
function getProjectFiles(rootDir, callback) {
    if (rootDir === void 0) { rootDir = path.join('.', '/'); }
    return __awaiter(this, void 0, void 0, function () {
        var filePushOrder, userConf;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    filePushOrder = (_a.sent()).filePushOrder;
                    userConf = getTranspileOptions();
                    // Read all filenames as a flattened tree
                    // Note: filePaths contain relative paths such as "test/bar.ts", "../../src/foo.js"
                    recursive(rootDir, function (err, filePaths) {
                        if (err)
                            return callback(err, null, null);
                        // Filter files that aren't allowed.
                        dotfile_1.DOTFILE.IGNORE().then(function (ignorePatterns) {
                            filePaths = filePaths.sort(); // Sort files alphanumerically
                            var abortPush = false;
                            var nonIgnoredFilePaths = [];
                            var ignoredFilePaths = [];
                            ignoredFilePaths = ignoredFilePaths.concat(ignorePatterns);
                            // Match the files with ignored glob pattern
                            readMultipleFiles(filePaths, 'utf8', function (err, contents) {
                                if (err)
                                    return callback(new Error(err), null, null);
                                // Check if there are files that will conflict if renamed .gs to .js.
                                // When pushing to Apps Script, these files will overwrite each other.
                                filePaths.map(function (name) {
                                    var fileNameWithoutExt = name.slice(0, -path.extname(name).length);
                                    if (filePaths.indexOf(fileNameWithoutExt + '.js') !== -1 &&
                                        filePaths.indexOf(fileNameWithoutExt + '.gs') !== -1) {
                                        // Can't rename, conflicting files
                                        abortPush = true;
                                        if (path.extname(name) === '.gs') {
                                            // only print error once (for .gs)
                                            utils_1.logError(null, utils_1.ERROR.CONFLICTING_FILE_EXTENSION(fileNameWithoutExt));
                                        }
                                    }
                                });
                                if (abortPush)
                                    return callback(new Error(), null, null);
                                // Replace OS specific path separator to common '/' char for console output
                                filePaths = filePaths.map(function (name) { return name.replace(/\\/g, '/'); });
                                // check ignore files
                                var ignoreMatches = multimatch(filePaths, ignorePatterns, { dot: true });
                                var intersection = filePaths.filter(function (file) { return !ignoreMatches.includes(file); });
                                // Loop through files that are not ignored
                                var files = intersection
                                    .map(function (name, i) {
                                    var normalizedName = path.normalize(name);
                                    var type = utils_1.getAPIFileType(name);
                                    // File source
                                    var source = fs.readFileSync(name).toString();
                                    if (type === 'TS') {
                                        // Transpile TypeScript to Google Apps Script
                                        // @see github.com/grant/ts2gas
                                        source = ts2gas(source, userConf);
                                        type = 'SERVER_JS';
                                    }
                                    // Formats rootDir/appsscript.json to appsscript.json.
                                    // Preserves subdirectory names in rootDir
                                    // (rootDir/foo/Code.js becomes foo/Code.js)
                                    var formattedName = getAppsScriptFileName(rootDir, name);
                                    // If the file is valid, return the file in a format suited for the Apps Script API.
                                    if (isValidFileName(name, type, rootDir, normalizedName, ignoreMatches)) {
                                        nonIgnoredFilePaths.push(name);
                                        var file = {
                                            name: formattedName,
                                            type: type,
                                            source: source,
                                        };
                                        return file;
                                    }
                                    else {
                                        ignoredFilePaths.push(name);
                                        return; // Skip ignored files
                                    }
                                })
                                    .filter(Boolean); // remove null values
                                // This statement customizes the order in which the files are pushed.
                                // It puts the files in the setting's filePushOrder first.
                                // This is needed because Apps Script blindly executes files in order of creation time.
                                // The Apps Script API updates the creation time of files.
                                if (filePushOrder) {
                                    utils_1.spinner.stop(true);
                                    console.log('Detected filePushOrder setting. Pushing these files first:');
                                    filePushOrder.map(function (file) {
                                        console.log("\u2514\u2500 " + file);
                                    });
                                    console.log('');
                                    nonIgnoredFilePaths = nonIgnoredFilePaths.sort(function (path1, path2) {
                                        // Get the file order index
                                        var path1Index = filePushOrder.indexOf(path1);
                                        var path2Index = filePushOrder.indexOf(path2);
                                        // If a file path isn't in the filePushOrder array, set the order to -∞.
                                        path1Index = path1Index === -1 ? Number.NEGATIVE_INFINITY : path1Index;
                                        path2Index = path2Index === -1 ? Number.NEGATIVE_INFINITY : path2Index;
                                        return path2Index - path1Index;
                                    });
                                }
                                callback(false, [nonIgnoredFilePaths, ignoredFilePaths], files);
                            });
                        });
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.getProjectFiles = getProjectFiles;
/**
 * If the file is valid, add it to our file list.
 * We generally want to allow for all file types, including files in node_modules/.
 * However, node_modules/@types/ files should be ignored.
 */
function isValidFileName(name, type, rootDir, normalizedName, ignoreMatches) {
    var valid = true; // Valid by default, until proven otherwise.
    // Has a type or is appsscript.json
    var isValidJSONIfJSON = true;
    if (type === 'JSON') {
        if (rootDir) {
            isValidJSONIfJSON = normalizedName === path.join(rootDir, 'appsscript.json');
        }
        else {
            isValidJSONIfJSON = name === 'appsscript.json';
        }
    }
    else {
        // Must be SERVER_JS or HTML.
        // https://developers.google.com/apps-script/api/reference/rest/v1/File
        valid = type === 'SERVER_JS' || type === 'HTML';
    }
    // Prevent node_modules/@types/
    if (name.includes('node_modules/@types')) {
        return false;
    }
    var validType = type && isValidJSONIfJSON;
    var notIgnored = !ignoreMatches.includes(name);
    valid = !!(valid && validType && notIgnored);
    return valid;
}
exports.isValidFileName = isValidFileName;
/**
 * Gets the name of the file for Apps Script.
 * Formats rootDir/appsscript.json to appsscript.json.
 * Preserves subdirectory names in rootDir
 * (rootDir/foo/Code.js becomes foo/Code.js)
 * @param {string} rootDir The directory to save the project files to.
 * @param {string} filePath Path of file that is part of the current project
 */
function getAppsScriptFileName(rootDir, filePath) {
    var nameWithoutExt = filePath.slice(0, -path.extname(filePath).length);
    var fullFilePathNoExt = rootDir ? path.relative(rootDir, nameWithoutExt) : nameWithoutExt;
    // Replace OS specific path separator to common '/' char
    fullFilePathNoExt = fullFilePathNoExt.replace(/\\/g, '/');
    return fullFilePathNoExt;
}
exports.getAppsScriptFileName = getAppsScriptFileName;
/**
 * Fetches the files for a project from the server
 * @param {string} scriptId The project script id
 * @param {number?} versionNumber The version of files to fetch.
 * @returns {AppsScriptFile[]} Fetched files
 */
function fetchProject(scriptId, versionNumber, silent) {
    if (silent === void 0) { silent = false; }
    return __awaiter(this, void 0, void 0, function () {
        var res, error_1, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.checkIfOnline()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, auth_1.loadAPICredentials()];
                case 2:
                    _a.sent();
                    utils_1.spinner.start();
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, auth_1.script.projects.getContent({
                            scriptId: scriptId,
                            versionNumber: versionNumber,
                        })];
                case 4:
                    res = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    error_1 = _a.sent();
                    if (error_1.statusCode === 404) {
                        throw Error(utils_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                    }
                    throw Error(utils_1.ERROR.SCRIPT_ID);
                case 6:
                    utils_1.spinner.stop(true);
                    data = res.data;
                    if (!data.files)
                        throw Error(utils_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                    if (!silent)
                        console.log(utils_1.LOG.CLONE_SUCCESS(data.files.length));
                    return [2 /*return*/, data.files];
            }
        });
    });
}
exports.fetchProject = fetchProject;
/**
 * Writes files locally to `pwd` with dots converted to subdirectories.
 * @param {AppsScriptFile[]} Files to wirte
 * @param {string?} rootDir The directory to save the project files to. Defaults to `pwd`
 */
function writeProjectFiles(files, rootDir) {
    if (rootDir === void 0) { rootDir = ''; }
    return __awaiter(this, void 0, void 0, function () {
        var fileExtension, sortedFiles;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    fileExtension = (_a.sent()).fileExtension;
                    sortedFiles = files.sort(function (file1, file2) { return file1.name.localeCompare(file2.name); });
                    sortedFiles.map(function (file) {
                        var filePath = file.name + "." + getFileType(file.type, fileExtension);
                        var truePath = (rootDir || '.') + "/" + filePath;
                        mkdirp(path.dirname(truePath), function (err) {
                            if (err)
                                return utils_1.logError(err, utils_1.ERROR.FS_DIR_WRITE);
                            if (!file.source)
                                return; // disallow empty files
                            fs.writeFile(truePath, file.source, function (err) {
                                if (err)
                                    return utils_1.logError(err, utils_1.ERROR.FS_FILE_WRITE);
                            });
                            // Log only filename if pulling to root (Code.gs vs ./Code.gs)
                            console.log("\u2514\u2500 " + (rootDir ? truePath : filePath));
                        });
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.writeProjectFiles = writeProjectFiles;
/**
 * Pushes project files to script.google.com.
 * @param {boolean} silent If true, doesn't console.log any success message.
 */
function pushFiles(silent) {
    if (silent === void 0) { silent = false; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, scriptId, rootDir;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    _a = _b.sent(), scriptId = _a.scriptId, rootDir = _a.rootDir;
                    if (!scriptId)
                        return [2 /*return*/];
                    // TODO Make getProjectFiles async
                    getProjectFiles(rootDir, function (err, projectFiles, files) {
                        if (files === void 0) { files = []; }
                        return __awaiter(_this, void 0, void 0, function () {
                            var nonIgnoredFilePaths, filesForAPI, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!err) return [3 /*break*/, 1];
                                        utils_1.logError(err, utils_1.LOG.PUSH_FAILURE);
                                        utils_1.spinner.stop(true);
                                        return [3 /*break*/, 6];
                                    case 1:
                                        if (!projectFiles) return [3 /*break*/, 6];
                                        nonIgnoredFilePaths = projectFiles[0];
                                        filesForAPI = files;
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 4, 5, 6]);
                                        return [4 /*yield*/, auth_1.script.projects.updateContent({
                                                scriptId: scriptId,
                                                requestBody: {
                                                    scriptId: scriptId,
                                                    files: filesForAPI,
                                                },
                                            })];
                                    case 3:
                                        _a.sent();
                                        return [3 /*break*/, 6];
                                    case 4:
                                        e_1 = _a.sent();
                                        console.error(utils_1.LOG.PUSH_FAILURE);
                                        console.log(e_1);
                                        return [3 /*break*/, 6];
                                    case 5:
                                        if (!silent)
                                            utils_1.spinner.stop(true);
                                        // no error
                                        if (!silent) {
                                            nonIgnoredFilePaths.map(function (filePath) {
                                                console.log("\u2514\u2500 " + filePath);
                                            });
                                            console.log(utils_1.LOG.PUSH_SUCCESS(nonIgnoredFilePaths.length));
                                        }
                                        return [7 /*endfinally*/];
                                    case 6: return [2 /*return*/];
                                }
                            });
                        });
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.pushFiles = pushFiles;
//# sourceMappingURL=data:application/json;base64,