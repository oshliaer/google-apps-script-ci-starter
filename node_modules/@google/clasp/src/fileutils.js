"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var recursive = require("recursive-readdir");
var ts = require("typescript");
var dotfile_1 = require("./dotfile");
var utils_1 = require("./utils");
var readMultipleFiles = require('read-multiple-files');
var ts2gas = require('ts2gas');
var findParentDir = require('find-parent-dir');
/**
 * Gets a list of all files that are within the specified directory's folder.
 * @param {string} rootDir The base directory to get the file paths at.
 */
function getAllFilePaths(rootDir) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res, rej) {
                    recursive(rootDir, function (err, filePaths) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (err)
                                return [2 /*return*/, rej(err)];
                            res(filePaths.sort());
                            return [2 /*return*/];
                        });
                    }); });
                })];
        });
    });
}
exports.getAllFilePaths = getAllFilePaths;
/**
 * Filters out bad file paths.
 * Valid paths includes .ts, .gs, .html files.
 * Valid paths includes appsscript.json file.
 */
function getValidFilePaths(filePaths) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, filePaths.filter(function (filePath) {
                    var ext = path.extname(filePath).toLowerCase();
                    var isJSFile = ext === '.js' || ext === '.ts' || ext === '.gs';
                    var isManifest = filePath === 'appsscript.json';
                    // console.log(isJSFile, isManifest, filePath);
                    return isJSFile || isManifest; // don't filter these files.
                })];
        });
    });
}
exports.getValidFilePaths = getValidFilePaths;
/**
 * Gets the contents of a list of files.
 * @param {string[]} filePaths A list of file paths.
 */
function getFileContents(filePaths) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (res, rej) {
                    readMultipleFiles(filePaths, 'utf8', function (err, contents) {
                        if (err)
                            return rej(err);
                        var o = contents.map(function (content, i) {
                            return {
                                name: filePaths[i],
                                content: content,
                            };
                        });
                        res(o);
                    });
                })];
        });
    });
}
exports.getFileContents = getFileContents;
/**
 * Fixes OS specific path separator.
 * @param {Files[]} files The files to fix the path.
 */
function fixFilePaths(files) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            files.map(function (f) {
                // Replace OS specific path separator to common '/' char for console output
                f.name = f.name.replace(/\\/g, '/');
            });
            return [2 /*return*/, files];
        });
    });
}
exports.fixFilePaths = fixFilePaths;
/**
 * Checks the file paths for files that would conflict when renaming ts/js to gs.
 * @param {boolean} filePaths Returns true if there are conflicting files. Logs the file name.
 */
function checkConflictingFilePaths(filePaths) {
    return __awaiter(this, void 0, void 0, function () {
        var abortPush;
        return __generator(this, function (_a) {
            abortPush = false;
            return [2 /*return*/, new Promise(function (res, rej) {
                    // Check if there are files that will conflict if renamed .gs to .js.
                    // When pushing to Apps Script, these files will overwrite each other.
                    filePaths.map(function (name) {
                        var fileNameWithoutExt = name.slice(0, -path.extname(name).length);
                        if (filePaths.indexOf(fileNameWithoutExt + '.ts') !== -1 &&
                            filePaths.indexOf(fileNameWithoutExt + '.js') !== -1 &&
                            filePaths.indexOf(fileNameWithoutExt + '.gs') !== -1) {
                            // Can't rename, conflicting files
                            abortPush = true;
                            if (path.extname(name) === '.gs') {
                                // only print error once (for .gs)
                                utils_1.logError(null, utils_1.ERROR.CONFLICTING_FILE_EXTENSION(fileNameWithoutExt));
                            }
                        }
                    });
                    res(abortPush);
                })];
        });
    });
}
exports.checkConflictingFilePaths = checkConflictingFilePaths;
/**
 * Returns in tsconfig.json.
 * @returns {ts.TranspileOptions} if tsconfig.json not exists, return undefined.
 */
function getTranspileOptions() {
    var projectDirectory = findParentDir.sync(process.cwd(), dotfile_1.DOT.PROJECT.PATH) || dotfile_1.DOT.PROJECT.DIR;
    var tsconfigPath = path.join(projectDirectory, 'tsconfig.json');
    if (fs.existsSync(tsconfigPath)) {
        var tsconfigContent = fs.readFileSync(tsconfigPath, 'utf8');
        var parsedConfigResult = ts.parseConfigFileTextToJson(tsconfigPath, tsconfigContent);
        return {
            compilerOptions: parsedConfigResult.config.compilerOptions,
        };
    }
    return {};
}
exports.getTranspileOptions = getTranspileOptions;
/**
 * Gets the name of the file for Apps Script.
 * Formats rootDir/appsscript.json to appsscript.json.
 * Preserves subdirectory names in rootDir
 * (rootDir/foo/Code.js becomes foo/Code.js)
 * @param {string} rootDir The directory to save the project files to.
 * @param {string} filePath Path of file that is part of the current project
 */
function getAppsScriptFileName(rootDir, filePath) {
    var nameWithoutExt = filePath.slice(0, -path.extname(filePath).length);
    var fullFilePathNoExt = rootDir ? path.relative(rootDir, nameWithoutExt) : nameWithoutExt;
    // Replace OS specific path separator to common '/' char
    fullFilePathNoExt = fullFilePathNoExt.replace(/\\/g, '/');
    return fullFilePathNoExt;
}
exports.getAppsScriptFileName = getAppsScriptFileName;
/**
 * Transpiles TS files to GS
 * @param {ProjectFile[]} files A list of project files.
 * @see http://github.com/grant/ts2gas
 */
function transpileTsFiles(files) {
    return __awaiter(this, void 0, void 0, function () {
        var userTranspileOptions;
        return __generator(this, function (_a) {
            userTranspileOptions = getTranspileOptions();
            return [2 /*return*/, files.map(function (file) {
                    // File source
                    var source = file.content;
                    if (path.extname(file.name).toUpperCase() === '.TS') {
                        file.content = ts2gas(source, userTranspileOptions);
                    }
                    return file;
                })];
        });
    });
}
exports.transpileTsFiles = transpileTsFiles;
/**
 * Removes the extension from the name.
 */
function removeExtensionFromName(files) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, files.map(function (file) {
                    var ext = path.extname(file.name);
                    console.log(ext);
                    var fileNameWithoutExt = file.name.slice(0, -ext.length);
                    return {
                        name: fileNameWithoutExt,
                        content: file.content,
                    };
                })];
        });
    });
}
exports.removeExtensionFromName = removeExtensionFromName;
/**
 * Sorts files by push order.
 * @param {ProjectFile[]} ProjectFile A list of project files.
 */
function sortFilesByPushOrder(files) {
    return __awaiter(this, void 0, void 0, function () {
        var filePushOrder;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    filePushOrder = (_a.sent()).filePushOrder;
                    if (!filePushOrder)
                        return [2 /*return*/, files];
                    console.log('Detected filePushOrder setting. Pushing these files first:');
                    filePushOrder.map(function (file) {
                        console.log("\u2514\u2500 " + file);
                    });
                    console.log('');
                    return [2 /*return*/, files = files.sort(function (file1, file2) {
                            if (!filePushOrder)
                                return 0; // TS complains
                            // Get the file order index
                            var path1Index = filePushOrder.indexOf(file1.name);
                            var path2Index = filePushOrder.indexOf(file2.name);
                            // If a file path isn't in the filePushOrder array, set the order to -∞.
                            path1Index = path1Index === -1 ? Number.NEGATIVE_INFINITY : path1Index;
                            path2Index = path2Index === -1 ? Number.NEGATIVE_INFINITY : path2Index;
                            return path2Index - path1Index;
                        })];
            }
        });
    });
}
exports.sortFilesByPushOrder = sortFilesByPushOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1QkFBeUI7QUFDekIsMkJBQTZCO0FBQzdCLDZDQUErQztBQUMvQywrQkFBaUM7QUFDakMscUNBQThCO0FBQzlCLGlDQUF1RTtBQUN2RSxJQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3pELElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNqQyxJQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQWVqRDs7O0dBR0c7QUFDSCxTQUFzQixlQUFlLENBQUMsT0FBZTs7OztZQUNuRCxzQkFBTyxJQUFJLE9BQU8sQ0FBVyxVQUFDLEdBQUcsRUFBRSxHQUFHO29CQUNwQyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQU8sR0FBRyxFQUFFLFNBQVM7OzRCQUN0QyxJQUFJLEdBQUc7Z0NBQUUsc0JBQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFDOzRCQUN6QixHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7Ozt5QkFDdkIsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxFQUFDOzs7Q0FDSjtBQVBELDBDQU9DO0FBRUQ7Ozs7R0FJRztBQUNILFNBQXNCLGlCQUFpQixDQUFDLFNBQW1COzs7WUFDekQsc0JBQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFBLFFBQVE7b0JBQzlCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7b0JBQ2pELElBQU0sUUFBUSxHQUFHLEdBQUcsS0FBSyxLQUFLLElBQUksR0FBRyxLQUFLLEtBQUssSUFBSSxHQUFHLEtBQUssS0FBSyxDQUFDO29CQUNq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